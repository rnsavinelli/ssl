Ejemplo 1: Simple conversor de minúsculas a mayúsculas
Convierte letras minúsculas a mayúsculas dejando inalterado cualquier otro caracter leído
Notar que todo lo que no encaja en el patrón de la única regla es copiado tal cual en la salida.
Comandos:
flex -o 01test.c 01test.l
gcc -o 01test 01test.c -lfl
./01test <01pruebas.txt 

Ejemplo 2: Reemplazo muchos blancos con uno, elimino los de final de línea
COMENTARIO: El motivo por el cual al final de línea aplica la última regla y no la anterior es que a efectos de contar el largo de la cadena emparejada cuenta en final de línea. Según el manual oficial de flex, donde habla de encontrar un patrón al final de la línea:
‘r$’ an ‘r’, but only at the end of a line (i.e., just before a newline). Equivalent to ‘r/\n’. 
Comandos:
flex -o 02test.c 02test.l
gcc -o 02test 02test.c -lfl
./02test <02pruebas.txt 
Como ver que al final no quedaron espacios en blanco no se puede hacer en la consola, ejecutamos para que genere un archivo donde poder comprobarlo.
./02test <02pruebas.txt >02salida.txt

Ejemplo 3: similar al ejemplo del libro (Vol 1, cap 5.6.1.3) agregando palabras, e ignorando el resto
Comandos:
flex -o 03test.c 03test.l
gcc -o 03test 03test.c -lfl
./03test <03pruebas.txt 

Ejemplo 4: Versión modificada (enteros, un tipo de reales, palabras)
Notar lo poco legible que queda la ER de los enteros y el modo "ingenuo" de analizar
Comandos:
flex -o 04test.c 04test.l
gcc -o 04test 04test.c -lfl
./04test <04pruebas.txt 

Ejemplo 5: Versión modificada bis (hexa, octal, decimal, un tipo de reales, palabras)
Notar el código indentado en lugar de entre {% y %} (no es lo recomendable). Al tener la directiva %option outfile ya no es necesario usar -o 05test.c al ejecutar flex.
Notar la acción en más de una línea (a partir de la línea 11) y el manejo de error (en línea 19)
Comandos:
flex 05test.l
gcc -o 05test 05test.c -lfl
./05test <05pruebas.txt 

Ejemplo 6: Version con reales completos
Casi todas las posibilidades, uso de las definiciones para simplificar las reglas
Notar que 5xb toma 5 decimal e ignora el resto
Comandos:
flex 06test.l
gcc -o 06test 06test.c -lfl
./06test <06pruebas.txt 

Ejemplo 7: Similar al ejemplo 06 pero con "Forma de compilador"
Notar que uso el mismo archivo de pruebas
No busco EOF porque flex lo reconoce automáticamente y devuelve cero
Agrego reglas para detectar error en los reales y en los enteros decimales, conviene que las reglas de error deben estar abajo de las correctas para que a igualdad en largo elija la correcta.
Probar de mover la regla de error arriba de la correcta y flex emitirá la advertencia de regla que no se puede aplicar (para el caso de enteros, no ocurre con real)
Comandos:
flex 07test.l
gcc -o 07test 07test.c -lfl
./07test <06pruebas.txt 

Ejemplo 8: Similar al TP0 pero usando flex
En main no cambié nada salvo que reemplacé scanner() por yylex()
Comandos:
flex 08test.l
gcc -o 08scanner 08scanner.c 08main.c -lfl
./08scanner <08pruebas.txt 
